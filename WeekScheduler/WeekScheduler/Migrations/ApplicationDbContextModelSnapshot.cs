// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeekScheduler.Data;

namespace WeekScheduler.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WeekScheduler.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("Initials");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("WeekScheduler.Models.ActivityModel", b =>
                {
                    b.Property<int>("ActivityID");

                    b.Property<int>("DayOfWeek");

                    b.Property<double>("Hours");

                    b.Property<int>("Importance");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Owner");

                    b.Property<int>("TimeOfDay");

                    b.HasKey("ActivityID");

                    b.ToTable("Activity");
                });

            modelBuilder.Entity("WeekScheduler.Models.ActivityRecordModel", b =>
                {
                    b.Property<string>("EmployeeID");

                    b.Property<int>("ActivityID");

                    b.Property<int>("Weight");

                    b.HasKey("EmployeeID", "ActivityID");

                    b.HasAlternateKey("ActivityID", "EmployeeID");

                    b.ToTable("ActivityRecord");
                });

            modelBuilder.Entity("WeekScheduler.Models.EmployeeModel", b =>
                {
                    b.Property<string>("EmployeeID");

                    b.Property<string>("Color");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("NumOfWeeklyCounseling");

                    b.Property<int>("WeeklyWorkHours");

                    b.HasKey("EmployeeID");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("WeekScheduler.Models.EmployeeProjectModel", b =>
                {
                    b.Property<int>("ProjectID");

                    b.Property<string>("EmployeeID");

                    b.HasKey("ProjectID", "EmployeeID");

                    b.HasAlternateKey("EmployeeID", "ProjectID");

                    b.ToTable("EmployeeProject");
                });

            modelBuilder.Entity("WeekScheduler.Models.ProjectModel", b =>
                {
                    b.Property<int>("ProjectID");

                    b.Property<string>("CountryCode")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ProjectID");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("WeekScheduler.Models.RuleModel", b =>
                {
                    b.Property<int>("RuleID");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("RuleStatus");

                    b.HasKey("RuleID");

                    b.ToTable("Rule");
                });

            modelBuilder.Entity("WeekScheduler.Models.SlotModel", b =>
                {
                    b.Property<int>("ProjectID");

                    b.Property<string>("WeekID");

                    b.Property<int>("ActivityID");

                    b.Property<string>("EmployeeID");

                    b.Property<string>("Notes");

                    b.HasKey("ProjectID", "WeekID", "ActivityID", "EmployeeID");

                    b.HasAlternateKey("ActivityID", "EmployeeID", "ProjectID", "WeekID");

                    b.ToTable("Slot");
                });

            modelBuilder.Entity("WeekScheduler.Models.TagModel", b =>
                {
                    b.Property<string>("TagID")
                        .HasMaxLength(40);

                    b.Property<int>("ActivityID");

                    b.HasKey("TagID", "ActivityID");

                    b.HasAlternateKey("ActivityID", "TagID");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("WeekScheduler.Models.WeekModel", b =>
                {
                    b.Property<int>("ProjectID");

                    b.Property<string>("WeekID");

                    b.Property<DateTime>("FirstDayOfTheWeek");

                    b.Property<string>("Notes1Monday");

                    b.Property<string>("Notes2Tuesday");

                    b.Property<string>("Notes3Wednesday");

                    b.Property<string>("Notes4Thursday");

                    b.Property<string>("Notes5Friday");

                    b.Property<string>("Notes6Saturday");

                    b.Property<string>("Notes7Sunday");

                    b.HasKey("ProjectID", "WeekID");

                    b.ToTable("Week");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WeekScheduler.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WeekScheduler.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WeekScheduler.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WeekScheduler.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
